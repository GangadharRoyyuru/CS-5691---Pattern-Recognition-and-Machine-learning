# -*- coding: utf-8 -*-
"""ME19B190_CE19B084_DataContest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jVf9GKM6EI9eDcTkehFOHg9_c7A1TxWh
"""

import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor as rf
from sklearn.model_selection import train_test_split

bookings = pd.read_csv('./../data/bookings.csv')
bookings_data = pd.read_csv('./../data/bookings_data.csv')
hotels_data = pd.read_csv('./../data/hotels_data.csv')
customer_data = pd.read_csv('./../data/customer_data.csv')
payments_data = pd.read_csv('./../data/payments_data.csv')
training_data = pd.read_csv('./../data/train_data.csv')

testing_data = pd.read_csv('./../data/sample_submission_5.csv')

hotels_data['hotel_category'].fillna(np.array(hotels_data['hotel_category'].mode())[0],inplace = True)
hotels_data['hotel_description_length'].fillna(round(hotels_data['hotel_description_length'].mean()),inplace = True)
hotels_data['hotel_photos_qty'].fillna(np.array(hotels_data['hotel_photos_qty'].mode())[0],inplace = True)
hotels_data['hotel_name_length'].fillna(np.array(hotels_data['hotel_name_length'].mode())[0],inplace = True)

keys = customer_data['customer_id']
value = customer_data['customer_unique_id']
temp_dict = dict(zip(keys,value))
bookings['customer_unique_id']  = bookings['customer_id'].map(temp_dict)

keys =  bookings['booking_id']
value = bookings['customer_id']
temp_dict = dict(zip(keys,value))
bookings_data['customer_id'] = bookings_data['booking_id'].map(temp_dict)


keys = customer_data['customer_id']
value = customer_data['customer_unique_id']
temp_dict = dict(zip(keys,value))
bookings_data['customer_unique_id']  = bookings_data['customer_id'].map(temp_dict)

keys =  bookings['booking_id']
value = bookings['customer_id']
temp_dict = dict(zip(keys,value))
payments_data['customer_id'] = payments_data['booking_id'].map(temp_dict)

keys = customer_data['customer_id']
value = customer_data['customer_unique_id']
temp_dict = dict(zip(keys,value))
payments_data['customer_unique_id']  = payments_data['customer_id'].map(temp_dict)

keys =  bookings['booking_id']
value = bookings['customer_id']
temp_dict = dict(zip(keys,value))
training_data['customer_id'] = training_data['booking_id'].map(temp_dict)

keys = customer_data['customer_id']
value = customer_data['customer_unique_id']
temp_dict = dict(zip(keys,value))
training_data['customer_unique_id']  = training_data['customer_id'].map(temp_dict)

keys = hotels_data['hotel_id']
values = hotels_data['hotel_category']
temp_dict = dict(zip(keys,values))
bookings_data['hotel_category'] = bookings_data['hotel_id'].map(temp_dict)

keys = hotels_data['hotel_id']
values = hotels_data['hotel_description_length']
temp_dict = dict(zip(keys,values))
bookings_data['hotel_description_length'] = bookings_data['hotel_id'].map(temp_dict)

keys = hotels_data['hotel_id']
values = hotels_data['hotel_photos_qty']
temp_dict = dict(zip(keys,values))
bookings_data['hotel_photos_qty'] = bookings_data['hotel_id'].map(temp_dict)

keys = hotels_data['hotel_id']
values = hotels_data['hotel_name_length']
temp_dict = dict(zip(keys,values))
bookings_data['hotel_name_length'] = bookings_data['hotel_id'].map(temp_dict)

bookings_data_grouped_by_bookid = bookings_data.groupby("booking_id")

#timed 1 = 4min
keys_booking_id = bookings_data['booking_id'].unique()
values_price = np.array([])
values_agent_fees = np.array([])
values_hotel_category = np.array([])
values_hotel_description_length = np.array([])
values_hotel_photos_qty = np.array([])
values_payment_value = np.array([])
values_hotel_length = np.array([])

for i in keys_booking_id:
  df = bookings_data_grouped_by_bookid.get_group(i)
  val = df['price'].sum()+df['agent_fees'].sum()
  values_payment_value = np.append(values_payment_value, val)
  val = df['price'].mean()
  values_price = np.append(values_price, val )
  val = df['agent_fees'].mean()
  values_agent_fees = np.append(values_agent_fees, val)
  val = np.array(df['hotel_category'].mode())[0]
  values_hotel_category = np.append(values_hotel_category, val)
  val = round(df['hotel_description_length'].mean())
  values_hotel_description_length = np.append(values_hotel_description_length, val)
  val = np.array(df['hotel_photos_qty'].mode())[0]
  values_hotel_photos_qty = np.append(values_hotel_photos_qty, val)
  val = round(df['hotel_name_length'].mean())
  values_hotel_length = np.append(values_hotel_length, val)

keys = bookings_data['booking_id'].unique()
values = [max(bookings_data_grouped_by_bookid.get_group(i)['booking_sequence_id']) for i in keys]
temp_dict = dict(zip(keys,values))
training_data['booking_sequence_id'] = training_data['booking_id'].map(temp_dict)

training_data['booking_sequence_id'].fillna(np.array(training_data['booking_sequence_id'].mode())[0], inplace = True)

#timed 1 = 3min
values_seller_id = np.array([])
keys_booking_id = bookings_data['booking_id'].unique()

for i in keys_booking_id:
  df = bookings_data_grouped_by_bookid.get_group(i)
  val = np.array(df['seller_agent_id'].mode())[0]
  values_seller_id = np.append(values_seller_id,val)

payments_data_grouped_by_bookid = payments_data.groupby('booking_id')

#timed2 = 6 min
  
keys_payment = payments_data['booking_id'].unique()
values_paymentdata = np.array([])
values_payment_type = np.array([])
for i in keys_payment:
  df = payments_data_grouped_by_bookid.get_group(i)
  val = df['payment_value'].sum()
  values_paymentdata = np.append(values_paymentdata,val)
  val = np.array(df['payment_type'].mode())[0]
  values_payment_type = np.append(values_payment_type,val)

dict_paydata_1 = dict(zip(keys_payment,values_paymentdata))
dict_paydata_2 = dict(zip(keys_payment,values_payment_type))

key  = bookings['booking_id']
values = bookings['booking_status']
dict_temp =  dict(zip(key,values))
training_data['booking_status']=training_data['booking_id'].map(dict_temp)

key  = bookings['booking_id']
values = bookings['booking_create_timestamp']
dict_temp =  dict(zip(key,values))
training_data['booking_create_timestamp']=training_data['booking_id'].map(dict_temp)

key  = bookings['booking_id']
values = bookings['booking_approved_at']
dict_temp =  dict(zip(key,values))
training_data['booking_approved_at']=training_data['booking_id'].map(dict_temp)

dict_temp1 = dict(zip(keys_booking_id,values_price))
dict_temp2 = dict(zip(keys_booking_id,values_agent_fees))
dict_temp3 = dict(zip(keys_booking_id,values_hotel_category))
dict_temp4 = dict(zip(keys_booking_id,values_hotel_description_length))
dict_temp5 = dict(zip(keys_booking_id,values_hotel_photos_qty))
dict_temp6 = dict(zip(keys_booking_id,values_payment_value))
dict_temp7 = dict(zip(keys_booking_id,values_hotel_length))
dict_temp8 = dict(zip(keys_booking_id,values_seller_id))

training_data['price']=training_data['booking_id'].map(dict_temp1)
training_data['agent_fees']=training_data['booking_id'].map(dict_temp2)
training_data['hotel_category']=training_data['booking_id'].map(dict_temp3)
training_data['hotel_description_length']=training_data['booking_id'].map(dict_temp4)
training_data['hotel_photos_qty']=training_data['booking_id'].map(dict_temp5)
training_data['hotel_name_length']=training_data['booking_id'].map(dict_temp7)

training_data['seller_agent_id']=training_data['booking_id'].map(dict_temp8)

bookings['diff_approval'] = (pd.to_datetime(bookings['booking_create_timestamp']) - pd.to_datetime(bookings['booking_approved_at'])).dt.total_seconds()
bookings['diff_approval'] = -1*bookings['diff_approval']

keys = customer_data['customer_id']
values = customer_data['customer_unique_id']
temp_dict = dict(zip(keys,values))
bookings['customer_unique_id'] = bookings['customer_id'].map(temp_dict)

keys = customer_data['customer_unique_id']
values = customer_data['country']
temp_dict = dict(zip(keys,values))
bookings['country'] = bookings['customer_unique_id'].map(temp_dict)

key  = bookings['booking_id']
values = bookings['diff_approval']
dict_temp =  dict(zip(key,values))
training_data['diff_approval']=training_data['booking_id'].map(dict_temp)

def closest_value(input_list, input_value):
  arr = np.asarray(input_list)
  i = min((np.abs(arr - input_value)))
  indices = np.where((np.abs(arr - input_value)) == i)
 
  return arr[indices]

def return_attributes_(dict_temp1,dict_temp2,dict_temp3,dict_temp4,dict_temp5,dict_temp6,dict_temp7,dict_temp8,closest_val):
  price = np.array([])
  agent_fees = np.array([])
  hotel_category = np.array([])
  hotel_description_length = np.array([])
  hotel_photos_qty = np.array([])
  hotel_name_length = np.array([])
  seller_id = np.array([])

  for closeval in closest_val:
    bookinid = np.array([i for i in dict_temp6 if dict_temp6[i]==closeval])
    for booking_id in bookinid:
      price = np.append(price,dict_temp1[booking_id])
      agent_fees = np.append(agent_fees,dict_temp2[booking_id])
      hotel_category = np.append(hotel_category,dict_temp3[booking_id])
      hotel_description_length = np.append(hotel_description_length,dict_temp4[booking_id])
      hotel_photos_qty = np.append(hotel_photos_qty,dict_temp5[booking_id])
      hotel_name_length = np.append(hotel_name_length,dict_temp7[booking_id])
      seller_id = np.append(seller_id,dict_temp8[booking_id])
  price = price.mean()
  agent_fees = agent_fees.mean()
  hotel_description_length = hotel_description_length.mean()
  hotel_category = pd.DataFrame(hotel_category)
  hotel_category= np.array(hotel_category[0].mode())[0]
  hotel_photos_qty = pd.DataFrame(hotel_photos_qty)
  hotel_photos_qty= np.array(hotel_photos_qty[0].mode())[0]
  hotel_name_length = hotel_name_length.mean()
  seller_id = pd.DataFrame(seller_id)
  seller_id= np.array(seller_id[0].mode())[0]

  return [price, agent_fees,hotel_category,hotel_description_length,hotel_photos_qty,hotel_name_length,seller_id]

#time3 - 2 min
indicesnotinbookings_data = np.array(training_data[training_data.isna().any(axis=1)].index)
booking_ids = training_data['booking_id'].iloc[indicesnotinbookings_data]
key_list = list(dict_temp6.keys())
val_list = list(dict_temp6.values())
for i in indicesnotinbookings_data:
    b_id = training_data['booking_id'].iloc[i]
    payval = dict_paydata_1[b_id]
    
    closetval = closest_value(val_list,payval)
    
    temp = return_attributes_(dict_temp1,dict_temp2,dict_temp3,dict_temp4,dict_temp5,dict_temp6,dict_temp7,dict_temp8,closetval)
    training_data['price'].iloc[i] = temp[0]
    training_data['agent_fees'].iloc[i] = temp[1]
    training_data['hotel_category'].iloc[i]= temp[2]
    training_data['hotel_description_length'].iloc[i]= temp[3]
    training_data['hotel_photos_qty'].iloc[i] = temp[4]
    training_data['hotel_name_length'].iloc[i]= temp[5]
    training_data['seller_agent_id'].iloc[i] = temp[6]

keys = bookings['booking_id']
values = bookings['country']
temp_dict= dict(zip(keys,values))
training_data['country'] = training_data['booking_id'].map(temp_dict)

training_data['payment_type'] = training_data['booking_id'].map(dict_paydata_2)

#again work on this point--why diff approval is non null
def impute_diffapproval(cols):
    diff_approval = cols[0]
    booking_status = cols[1]
    
    if pd.isnull(diff_approval):

        if booking_status == 'canceled':
            return bookings['diff_approval'][bookings['booking_status']=='canceled'].max()

        elif booking_status == 'completed':
            return bookings['diff_approval'][bookings['booking_status']=='completed'].mean()

        else:
            return max(bookings['diff_approval'])

    else:
        return diff_approval
training_data['diff_approval'] = training_data[['diff_approval','booking_status']].apply(impute_diffapproval,axis=1)

training_data.drop(columns = ['booking_approved_at'],axis = 1,inplace= True)

df_train = training_data.dropna()

payments_data_group_by = payments_data.groupby('booking_id')
keys = payments_data['booking_id'].unique()
values_install = [max(payments_data_group_by.get_group(i)['payment_installments']) for i in keys]
values_sequential  = [max(payments_data_group_by.get_group(i)['payment_sequential']) for i in keys]

temp_dict = dict(zip(keys,values_sequential))

df_train['payment_sequential'] = df_train['booking_id'].map(temp_dict)


temp_dict = dict(zip(keys,values_install))
df_train['payment_installments'] = df_train['booking_id'].map(temp_dict)

bookings['diff_approval_2'] = (pd.to_datetime(bookings['booking_approved_at']) - pd.to_datetime(bookings['booking_checkin_customer_date'])).dt.total_seconds()
bookings['diff_approval_2'] = -1*bookings['diff_approval_2']

keys = bookings['booking_id']
values  = bookings['diff_approval_2']
temp_dict = dict(zip(keys,values))
df_train['diff_approval_2'] = df_train['booking_id'].map(temp_dict)

def impute_diffapproval2(cols):
    diff_approval = cols[0]
    booking_status = cols[1]
    
    if pd.isnull(diff_approval):

        if booking_status == 'canceled':
            return 1000+bookings['diff_approval_2'][bookings['booking_status']=='canceled'].max()
        elif booking_status == 'created':
            return 1000+bookings['diff_approval_2'].max()

        elif booking_status == 'completed':
            return bookings['diff_approval_2'][bookings['booking_status']=='completed'].mean()

        elif  booking_status == 'processed' or booking_status == 'unavailable':
            return bookings['diff_approval_2'][bookings['booking_status']=='completed'].mean()
        elif booking_status == 'invoiced' or booking_status == 'processing' :
            return bookings['diff_approval_2'][bookings['booking_status']=='completed'].median()
        else:
            return 1000+bookings['diff_approval_2'].max()
        
    else:
        return diff_approval
df_train['diff_approval_2'] = df_train[['diff_approval_2','booking_status']].apply(impute_diffapproval2,axis=1)

train_grouped_by_seller = df_train.groupby("seller_agent_id")

df_train['seller_agent_id'] = df_train['seller_agent_id'].astype(str)

ratings_seller_id = df_train['seller_agent_id'].unique()
values_seller_rating = np.array([])
for i in ratings_seller_id:
  df = train_grouped_by_seller.get_group(i)
  val = df['rating_score'].mean()
  values_seller_rating = np.append(values_seller_rating, val)

train_grouped_by_paymenttype = df_train.groupby("payment_type")

ratings_payment_type = df_train['payment_type'].unique()
values_payment_type = np.array([])
for i in ratings_payment_type:
  df = train_grouped_by_paymenttype.get_group(i)
  val = df['rating_score'].mean()
  values_payment_type = np.append(values_payment_type, val)

train_grouped_by_bookingstatus = df_train.groupby("booking_status")

ratings_booking_status = df_train['booking_status'].unique()
values_booking_status = np.array([])
for i in ratings_booking_status:
  df = train_grouped_by_bookingstatus.get_group(i)
  val = df['rating_score'].mean()
  values_booking_status = np.append(values_booking_status, val)

temp_dict = dict(zip(ratings_seller_id,values_seller_rating))
df_train['seller_rating'] = df_train['seller_agent_id'].map(temp_dict)

temp_dict = dict(zip(ratings_payment_type,values_payment_type))
df_train['payment_type_num'] = df_train['payment_type'].map(temp_dict)

temp_dict = dict(zip(ratings_booking_status,values_booking_status))
df_train['booking_status_num'] = df_train['booking_status'].map(temp_dict)

X = df_train.drop(columns = ['payment_type','booking_status','customer_id','customer_unique_id','booking_id','rating_score','booking_create_timestamp','hotel_name_length','seller_agent_id'],axis = 1)
Y = df_train.rating_score

X = pd.get_dummies(X,columns= ['country'],drop_first = True)

for i in ['diff_approval_2','price','agent_fees','diff_approval','booking_sequence_id']:
  
  X[i].astype('float')

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size= 0.2)

model = rf(n_estimators = 250, criterion ='squared_error',bootstrap = True, max_depth = 9, max_features = 13)

#time3: 4min
model.fit(X_train,Y_train)

keys =  bookings['booking_id']
value = bookings['customer_id']
temp_dict = dict(zip(keys,value))
testing_data['customer_id'] = testing_data['booking_id'].map(temp_dict)

keys = customer_data['customer_id']
value = customer_data['customer_unique_id']
temp_dict = dict(zip(keys,value))
testing_data['customer_unique_id']  = testing_data['customer_id'].map(temp_dict)

keys = bookings_data['booking_id'].unique()
values = [max(bookings_data_grouped_by_bookid.get_group(i)['booking_sequence_id']) for i in keys]
temp_dict = dict(zip(keys,values))
testing_data['booking_sequence_id'] = testing_data['booking_id'].map(temp_dict)

testing_data['booking_sequence_id'].fillna(np.array(testing_data['booking_sequence_id'].mode())[0], inplace = True)

key  = bookings['booking_id']
values = bookings['booking_status']
dict_temp =  dict(zip(key,values))
testing_data['booking_status']=testing_data['booking_id'].map(dict_temp)

key  = bookings['booking_id']
values = bookings['booking_create_timestamp']
dict_temp =  dict(zip(key,values))
testing_data['booking_create_timestamp']=testing_data['booking_id'].map(dict_temp)

key  = bookings['booking_id']
values = bookings['booking_approved_at']
dict_temp =  dict(zip(key,values))
testing_data['booking_approved_at']=testing_data['booking_id'].map(dict_temp)

testing_data['price']=testing_data['booking_id'].map(dict_temp1)
testing_data['agent_fees']=testing_data['booking_id'].map(dict_temp2)
testing_data['hotel_category']=testing_data['booking_id'].map(dict_temp3)
testing_data['hotel_description_length']=testing_data['booking_id'].map(dict_temp4)
testing_data['hotel_photos_qty']=testing_data['booking_id'].map(dict_temp5)
testing_data['hotel_name_length']=testing_data['booking_id'].map(dict_temp7)

testing_data['seller_agent_id']=testing_data['booking_id'].map(dict_temp8)

key  = bookings['booking_id']
values = bookings['diff_approval']
dict_temp =  dict(zip(key,values))
testing_data['diff_approval']=testing_data['booking_id'].map(dict_temp)

#time3 - 2 min
indicesnotinbookings_data = np.array(testing_data[testing_data.isna().any(axis=1)].index)
booking_ids = testing_data['booking_id'].iloc[indicesnotinbookings_data]
key_list = list(dict_temp6.keys())
val_list = list(dict_temp6.values())
for i in indicesnotinbookings_data:
    b_id = testing_data['booking_id'].iloc[i]
    payval = dict_paydata_1[b_id]
    
    closetval = closest_value(val_list,payval)
    
    temp = return_attributes_(dict_temp1,dict_temp2,dict_temp3,dict_temp4,dict_temp5,dict_temp6,dict_temp7,dict_temp8,closetval)
    testing_data['price'].iloc[i] = temp[0]
    testing_data['agent_fees'].iloc[i] = temp[1]
    testing_data['hotel_category'].iloc[i]= temp[2]
    testing_data['hotel_description_length'].iloc[i]= temp[3]
    testing_data['hotel_photos_qty'].iloc[i] = temp[4]
    testing_data['hotel_name_length'].iloc[i]= temp[5]
    testing_data['seller_agent_id'].iloc[i] = temp[6]

keys = bookings['booking_id']
values = bookings['country']
temp_dict= dict(zip(keys,values))
testing_data['country'] = testing_data['booking_id'].map(temp_dict)

testing_data['payment_type'] = testing_data['booking_id'].map(dict_paydata_2)

#again work on this point--why diff approval is non null
def impute_diffapproval(cols):
    diff_approval = cols[0]
    booking_status = cols[1]
    
    if pd.isnull(diff_approval):

        if booking_status == 'canceled':
            return bookings['diff_approval'][bookings['booking_status']=='canceled'].max()

        elif booking_status == 'completed':
            return bookings['diff_approval'][bookings['booking_status']=='completed'].mean()

        else:
            return max(bookings['diff_approval'])

    else:
        return diff_approval
testing_data['diff_approval'] = testing_data[['diff_approval','booking_status']].apply(impute_diffapproval,axis=1)

testing_data.drop(columns = ['booking_approved_at'],axis = 1,inplace= True)

testing_data['payment_type'].fillna(np.array(testing_data['payment_type'].mode())[0],inplace = True)

df_test = testing_data.dropna()

payments_data_group_by = payments_data.groupby('booking_id')
keys = payments_data['booking_id'].unique()
values_install = [max(payments_data_group_by.get_group(i)['payment_installments']) for i in keys]
values_sequential  = [max(payments_data_group_by.get_group(i)['payment_sequential']) for i in keys]

temp_dict = dict(zip(keys,values_sequential))

df_test['payment_sequential'] = df_test['booking_id'].map(temp_dict)


temp_dict = dict(zip(keys,values_install))
df_test['payment_installments'] = df_test['booking_id'].map(temp_dict)

df_test['payment_sequential'].fillna(np.array(df_test['payment_sequential'].mode())[0],inplace = True)
df_test['payment_installments'].fillna(np.array(df_test['payment_installments'].mode())[0],inplace = True)

keys = bookings['booking_id']
values  = bookings['diff_approval_2']
temp_dict = dict(zip(keys,values))
df_test['diff_approval_2'] = df_test['booking_id'].map(temp_dict)

def impute_diffapproval2(cols):
    diff_approval = cols[0]
    booking_status = cols[1]
    
    if pd.isnull(diff_approval):

        if booking_status == 'canceled':
            return 1000+bookings['diff_approval_2'][bookings['booking_status']=='canceled'].max()
        elif booking_status == 'created':
            return 1000+bookings['diff_approval_2'].max()

        elif booking_status == 'completed':
            return bookings['diff_approval_2'][bookings['booking_status']=='completed'].mean()

        elif  booking_status == 'processed' or booking_status == 'unavailable':
            return bookings['diff_approval_2'][bookings['booking_status']=='completed'].mean()
        elif booking_status == 'invoiced' or booking_status == 'processing' :
            return bookings['diff_approval_2'][bookings['booking_status']=='completed'].median()
        else:
            return 1000+bookings['diff_approval_2'].max()
        
    else:
        return diff_approval
df_test['diff_approval_2'] = df_test[['diff_approval_2','booking_status']].apply(impute_diffapproval2,axis=1)

train_grouped_by_seller = df_train.groupby("seller_agent_id")

ratings_seller_id = df_train['seller_agent_id'].unique()
values_seller_rating = np.array([])
for i in ratings_seller_id:
  df = train_grouped_by_seller.get_group(i)
  val = df['rating_score'].mean()
  values_seller_rating = np.append(values_seller_rating, val)

train_grouped_by_paymenttype = df_train.groupby("payment_type")

ratings_payment_type = df_train['payment_type'].unique()
values_payment_type = np.array([])
for i in ratings_payment_type:
  df = train_grouped_by_paymenttype.get_group(i)
  val = df['rating_score'].mean()
  values_payment_type = np.append(values_payment_type, val)

train_grouped_by_bookingstatus = df_train.groupby("booking_status")

ratings_booking_status = df_train['booking_status'].unique()
values_booking_status = np.array([])
for i in ratings_booking_status:
  df = train_grouped_by_bookingstatus.get_group(i)
  val = df['rating_score'].mean()
  values_booking_status = np.append(values_booking_status, val)

df_test['seller_agent_id'] = df['seller_agent_id'].astype(str)

temp_dict = dict(zip(ratings_seller_id,values_seller_rating))
df_test['seller_rating'] = df_test['seller_agent_id'].map(temp_dict)

temp_dict = dict(zip(ratings_payment_type,values_payment_type))
df_test['payment_type_num'] = df_test['payment_type'].map(temp_dict)

temp_dict = dict(zip(ratings_booking_status,values_booking_status))
df_test['booking_status_num'] = df_test['booking_status'].map(temp_dict)

df_testgroupedbyagentfees = df_test.groupby('agent_fees')
keys = list(df_test[df_test['seller_rating'].isnull()].index)
values = [df_testgroupedbyagentfees.get_group(df_test['agent_fees'].iloc[i])['seller_rating'].mean()    for i in keys]
temp_dict = dict(zip(keys,values))
df_test['seller_rating'].iloc[keys] = values
df_test['seller_rating'].fillna(df_test['seller_rating'].median(), inplace = True)

test = df_test.drop(columns = ['booking_id', 'rating_score', 'customer_id', 'customer_unique_id','booking_status', 'booking_create_timestamp','hotel_name_length', 'seller_agent_id','payment_type'],axis = 1)

test = pd.get_dummies(test, columns = ['country'],drop_first = True)

for i in ['diff_approval_2','price','agent_fees','diff_approval','hotel_description_length','seller_rating']:
  test[i].astype('float')

y_pred = model.predict(test)
for i in range(len(y_pred)):
    if y_pred[i]<1:
        y_pred[i] =1
    elif y_pred[i]>5:
        y_pred[i] = 5
    else:
        continue
predictions = pd.DataFrame([])
predictions['booking_id'] = df_test['booking_id']
predictions['rating_score'] = y_pred
predictions.to_csv('./../output/ME19B190_CE19B084.csv', index = False)

